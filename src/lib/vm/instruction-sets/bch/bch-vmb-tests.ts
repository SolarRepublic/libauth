/**
 * Below is the source data structure used to generate the Libauth Bitcoin Cash
 * (BCH) Virtual Machine Bytecode (VMB) tests (`bch_vmb_tests.json` and all `bch_vmb_tests_*.json` files). Compiling from TypeScript allows us to easily
 * 1) validate the data structure, and 2) reproducibly generate artifacts like
 * public keys, hashes, and signatures.
 *
 * To add tests to this file:
 *  1. Clone the Libauth repo and install dependencies using `yarn install`.
 *  2. Add the new tests below. Leave each UUID value as an empty strings
 *     (`''`) to randomly generate new UUIDs.
 *  3. Run `yarn gen:tests` to regenerate all test vectors.
 *  4. When you're ready to send a PR, copy the generated UUIDs from
 *     `bch_vmb_tests.json` back into this file to serve as each new tests'
 *     permanent UUID.
 *  5. Run `yarn test` to ensure everything is working, then send your PR.
 */

import type { AuthenticationTemplateScenario } from '../../../lib.js';

/**
 * Each BCH VM version currently has a `standard` and a `non-standard` mode.
 *
 * The `standard` mode should be used by practically all applications. It is
 * the strictest mode of operation, and it is used to validate transactions
 * before accepting or relaying them over the P2P network.
 *
 * The `non-standard` mode is slightly more lax, and is only used to validate
 * newly mined blocks. Because they cannot typically be relayed, non-standard
 * transactions must be manually included by a miner.
 *
 * This distinction offers the network Defense in Depth against various kinds of
 * DOS attacks.
 *
 * For example, it's possible to prepare thousands of UTXOs with
 * non-standard locking scripts which can be unlocked using very small
 * (non-P2SH) transactions but require unusually excessive resources to
 * validate (e.g. the maximum number of `OP_HASH256` operations). If these
 * non-standard redeem transactions were relayed and automatically accepted by
 * a miner, the miner could inadvertently create an unusually slow-to-validate
 * block. If another block is found before most miners are able to validate the
 * slow-to-validate block, the first miner's hashing power would be wasted (and
 * they would lose mining revenue).
 *
 * By maintaining this standard/non-standard distinction, the BCH ecosystem
 * retains the flexibility to experiment with unusual, non-standard transactions
 * while ensuring such activity can't negatively impact the network.
 *
 * Each VMB test must be marked with a base behavior:
 *
 * - Tests marked with `invalid` must fail in standard and non-standard mode.
 * - Tests marked with `standard` must pass in standard and non-standard mode.
 * - Tests marked with `valid` must pass in non-standard mode but fail in
 *   standard mode.
 *
 * When tests are generated, this behavior will be expected of all VM versions.
 * To then override the expected behavior for a specific VM version, use an
 * overriding label in the format: `VERSION_BEHAVIOR`.
 *
 * For example, a test marked `['invalid', 'standard_upgradeName']` will be
 * generated as a failing example for all VM versions except the `upgradeName`
 * VM version (for which it will be a passing example for both standard and
 * non-standard modes). This might occur when a new operation is introduced by
 * `upgradeName`.
 */
type ExpectedBehavior = 'invalid' | 'standard' | 'valid';
/**
 * These are the VM versions for which tests are currently generated.
 *
 * A new 4-digit year should be added to prepare for each annual upgrade.
 * Libauth can also support testing of draft proposals by specifying a short
 * identifier for each independent proposal.
 */
type VmVersion = '2021' | '2022';
type VersionOverride = `${VmVersion}_${ExpectedBehavior}`;
type AcceptableBehaviorLabelCombinations = [ExpectedBehavior, ...VersionOverride[]];
/* eslint-disable @typescript-eslint/naming-convention, camelcase */
/**
 * This data structure defines the `bch_vmb_tests` output files. Test sets for
 * additional upgrades or draft proposals can be generated by adding a filenames
 * and definitions here.
 */
export const generatedFiles: {
  [filename: string]: [ExpectedBehavior, ...VersionOverride[]];
} = {
  bch_vmb_tests_2021_invalid: ['invalid', '2021_invalid'],
  bch_vmb_tests_2021_standard: ['standard', '2021_standard'],
  bch_vmb_tests_2021_valid: ['valid', '2021_valid'],
  bch_vmb_tests_2022_invalid: ['invalid', '2022_invalid'],
  bch_vmb_tests_2022_standard: ['standard', '2022_standard'],
  bch_vmb_tests_2022_valid: ['valid', '2022_valid'],
};
/* eslint-enable @typescript-eslint/naming-convention, camelcase */

type TestDefinition = [
  /**
   * This script (defined using Libauth's templating language) is compiled to
   * `unlockingBytecode` in the test transaction(s) produced by this test
   * definition.
   */
  unlockingScript: string,
  /**
   * This script (defined using Libauth's templating language) is compiled to
   * the `redeemBytecode` and/or `lockingBytecode` to be satisfied by
   * `unlockingScript`.
   *
   * By default, each test definitions generates two tests, one test uses this
   * value as a simple `lockingBytecode`, the other test encodes this value as
   * the `redeemBytecode` of a P2SH UTXO (properly appending it to
   * `unlockingBytecode` in the test transaction).
   *
   * For `standard` test definitions, the P2SH evaluation is tested in standard
   * mode and the non-P2SH evaluation is tested in non-standard mode (marked as
   * only a `valid` test). For `valid` test definitions, both tests are marked
   * as `valid`.
   *
   * For greater control over which types of tests are generated, use
   * `otherProperties.p2sh`.
   */
  redeemOrLockingScript: string,
  expectedBehaviorLabels: AcceptableBehaviorLabelCombinations,
  UUID: string,
  testDescription?: string,
  otherProperties?: {
    /**
     * A scenario which extends the default scenario for use with this test.
     */
    scenario?: AuthenticationTemplateScenario;
    /**
     * If `undefined` (default), generate both tests, one P2SH and one non-P2SH.
     * (See `TestDefinition.redeemOrLockingScript` for details.)
     *
     * If `false`, generate only the non-P2SH test. If `true`, generate only the
     * P2SH test.
     */
    p2sh?: boolean;
  }
];
type TestGroup = [groupDescription: string, tests: TestDefinition[]];
/**
 * The source data structure used to generate the Libauth BCH VMB test
 * vectors (`bch_vmb_tests.json` and all `bch_vmb_*_tx.json` files).
 */
export const bchVmbTests: TestGroup[] = [
  [
    'Basic push operations',
    [
      ['OP_0', 'OP_SIZE <0> OP_EQUAL', ['standard'], 'OP_0 (A.K.A. OP_PUSHBYTES_0, OP_FALSE): Zero is represented by an empty stack item.'],
      ['OP_PUSHBYTES_1 0x00', 'OP_SIZE <1> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_1'],
      ['OP_PUSHBYTES_2 0x0000', 'OP_SIZE <2> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_2'],
      ['OP_PUSHBYTES_3 0x000000', 'OP_SIZE <3> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_3'],
      ['OP_PUSHBYTES_4 0x00000000', 'OP_SIZE <4> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_4'],
      ['OP_PUSHBYTES_5 0x0000000000', 'OP_SIZE <5> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_5'],
      ['OP_PUSHBYTES_6 0x000000000000', 'OP_SIZE <6> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_6'],
      ['OP_PUSHBYTES_7 0x00000000000000', 'OP_SIZE <7> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_7'],
      ['OP_PUSHBYTES_8 0x0000000000000000', 'OP_SIZE <8> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_8'],
      ['OP_PUSHBYTES_9 0x000000000000000000', 'OP_SIZE <9> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_9'],
      ['OP_PUSHBYTES_10 0x00000000000000000000', 'OP_SIZE <10> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_10'],
      ['OP_PUSHBYTES_11 0x0000000000000000000000', 'OP_SIZE <11> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_11'],
      ['OP_PUSHBYTES_12 0x000000000000000000000000', 'OP_SIZE <12> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_12'],
      ['OP_PUSHBYTES_13 0x00000000000000000000000000', 'OP_SIZE <13> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_13'],
      ['OP_PUSHBYTES_14 0x0000000000000000000000000000', 'OP_SIZE <14> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_14'],
      ['OP_PUSHBYTES_15 0x000000000000000000000000000000', 'OP_SIZE <15> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_15'],
      ['OP_PUSHBYTES_16 0x00000000000000000000000000000000', 'OP_SIZE <16> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_16'],
      ['OP_PUSHBYTES_17 0x0000000000000000000000000000000000', 'OP_SIZE <17> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_17'],
      ['OP_PUSHBYTES_18 0x000000000000000000000000000000000000', 'OP_SIZE <18> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_18'],
      ['OP_PUSHBYTES_19 0x00000000000000000000000000000000000000', 'OP_SIZE <19> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_19'],
      ['OP_PUSHBYTES_20 0x0000000000000000000000000000000000000000', 'OP_SIZE <20> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_20'],
      ['OP_PUSHBYTES_21 0x000000000000000000000000000000000000000000', 'OP_SIZE <21> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_21'],
      ['OP_PUSHBYTES_22 0x00000000000000000000000000000000000000000000', 'OP_SIZE <22> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_22'],
      ['OP_PUSHBYTES_23 0x0000000000000000000000000000000000000000000000', 'OP_SIZE <23> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_23'],
      ['OP_PUSHBYTES_24 0x000000000000000000000000000000000000000000000000', 'OP_SIZE <24> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_24'],
      ['OP_PUSHBYTES_25 0x00000000000000000000000000000000000000000000000000', 'OP_SIZE <25> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_25'],
      ['OP_PUSHBYTES_26 0x0000000000000000000000000000000000000000000000000000', 'OP_SIZE <26> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_26'],
      ['OP_PUSHBYTES_27 0x000000000000000000000000000000000000000000000000000000', 'OP_SIZE <27> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_27'],
      ['OP_PUSHBYTES_28 0x00000000000000000000000000000000000000000000000000000000', 'OP_SIZE <28> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_28'],
      ['OP_PUSHBYTES_29 0x0000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <29> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_29'],
      ['OP_PUSHBYTES_30 0x000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <30> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_30'],
      ['OP_PUSHBYTES_31 0x00000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <31> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_31'],
      ['OP_PUSHBYTES_32 0x0000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <32> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_32'],
      ['OP_PUSHBYTES_33 0x000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <33> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_33'],
      ['OP_PUSHBYTES_34 0x00000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <34> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_34'],
      ['OP_PUSHBYTES_35 0x0000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <35> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_35'],
      ['OP_PUSHBYTES_36 0x000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <36> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_36'],
      ['OP_PUSHBYTES_37 0x00000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <37> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_37'],
      ['OP_PUSHBYTES_38 0x0000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <38> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_38'],
      ['OP_PUSHBYTES_39 0x000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <39> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_39'],
      ['OP_PUSHBYTES_40 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <40> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_40'],
      ['OP_PUSHBYTES_41 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <41> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_41'],
      ['OP_PUSHBYTES_42 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <42> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_42'],
      ['OP_PUSHBYTES_43 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <43> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_43'],
      ['OP_PUSHBYTES_44 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <44> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_44'],
      ['OP_PUSHBYTES_45 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <45> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_45'],
      ['OP_PUSHBYTES_46 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <46> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_46'],
      ['OP_PUSHBYTES_47 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <47> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_47'],
      ['OP_PUSHBYTES_48 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <48> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_48'],
      ['OP_PUSHBYTES_49 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <49> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_49'],
      ['OP_PUSHBYTES_50 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <50> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_50'],
      ['OP_PUSHBYTES_51 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <51> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_51'],
      ['OP_PUSHBYTES_52 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <52> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_52'],
      ['OP_PUSHBYTES_53 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <53> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_53'],
      ['OP_PUSHBYTES_54 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <54> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_54'],
      ['OP_PUSHBYTES_55 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <55> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_55'],
      ['OP_PUSHBYTES_56 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <56> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_56'],
      ['OP_PUSHBYTES_57 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <57> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_57'],
      ['OP_PUSHBYTES_58 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <58> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_58'],
      ['OP_PUSHBYTES_59 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <59> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_59'],
      ['OP_PUSHBYTES_60 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <60> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_60'],
      ['OP_PUSHBYTES_61 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <61> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_61'],
      ['OP_PUSHBYTES_62 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <62> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_62'],
      ['OP_PUSHBYTES_63 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <63> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_63'],
      ['OP_PUSHBYTES_64 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <64> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_64'],
      ['OP_PUSHBYTES_65 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <65> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_65'],
      ['OP_PUSHBYTES_66 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <66> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_66'],
      ['OP_PUSHBYTES_67 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <67> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_67'],
      ['OP_PUSHBYTES_68 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <68> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_68'],
      ['OP_PUSHBYTES_69 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <69> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_69'],
      ['OP_PUSHBYTES_70 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <70> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_70'],
      ['OP_PUSHBYTES_71 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <71> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_71'],
      ['OP_PUSHBYTES_72 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <72> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_72'],
      ['OP_PUSHBYTES_73 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <73> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_73'],
      ['OP_PUSHBYTES_74 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <74> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_74'],
      ['OP_PUSHBYTES_75 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 'OP_SIZE <75> OP_EQUAL', ['standard'], 'OP_PUSHBYTES_75'],
    ],
  ],
  [
    'Arithmetic operations (32-bit)',
    [
      ['<1>', '<1> OP_ADD <2> OP_EQUAL', ['standard'], ''],
      ['', '', ['invalid'], ''],
    ],
  ],
];
